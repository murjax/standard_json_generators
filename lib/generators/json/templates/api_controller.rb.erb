class Api::<%= @model_name.pluralize %>Controller < ApiController
  def index
    authorize <%= @model_name %>

    <%= @model_name_plural %> = BaseIndexFilter
      .new(records: <%= @model_name %>, params:, sort_field: :<%= @json_config["primary_field"] %>, search_field: :<%= @json_config["primary_field"] %>)
      .call
      .map { |<%= @model_name_underscore %>| <%= @model_name_underscore %>.attributes }
    render json: {data: <%= @model_name_plural %>}
  end

  def show
    <%= @model_name_underscore %> = <%= @model_name %>.find(params[:id])
    authorize <%= @model_name_underscore %>

    render json: <%= @model_name_underscore %>.attributes
  end

  def create
    authorize <%= @model_name %>

    <%= @model_name_underscore %> = <%= @model_name %>.new(permitted_params)

    if <%= @model_name_underscore %>.save
      render json: <%= @model_name_underscore %>.attributes, status: :created
    else
      render json: {
        errors: <%= @model_name_underscore %>.errors
      }, status: :unprocessable_entity
    end
  end

  def update
    <%= @model_name_underscore %> = <%= @model_name %>.find(params[:id])
    authorize <%= @model_name_underscore %>

    <%= @model_name_underscore %>.assign_attributes(permitted_params)

    if <%= @model_name_underscore %>.save
      render json: <%= @model_name_underscore %>.attributes
    else
      render json: {
        errors: <%= @model_name_underscore %>.errors.map(&:full_message)
      }, status: :unprocessable_entity
    end
  end

  def destroy
    <%= @model_name_underscore %> = <%= @model_name %>.find(params[:id])
    authorize <%= @model_name_underscore %>

    <%= @model_name_underscore %>.destroy
    head :no_content
  end

  private

  def permitted_params
<% permitted_columns = @columns.map { |column| column["type"] == "reference" ? ":#{column["name"]}_id" : ":#{column["display_name"] || column["name"]}"}.join(", ") -%>
    params.require(:<%= @model_name_underscore %>).permit(<%= permitted_columns %>)
  end
end
